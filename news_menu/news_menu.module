<?php
/**
 * Menu module for the QWERTY News Website
 *
 * @author Pablo Viquez
 */

/**
 * Define menu items and page callbacks.
 *
 * @link https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_menu/7
 * @return array
 */
function news_menu_menu() {
  $menu = array();

  $menu['admin/structure/news_menu'] = array(
    'title' => 'QWERTY Menu',
    'description' => 'Administration and Configuration of the QWERTY Menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_news_menu_admin_form'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('admin qwerty news menu'),
  );

  return $menu;
}

/**
 * Define user permissions.
 *
 * This hook can supply permissions that the module defines, so that they can be
 * selected on the user permissions page and used to grant or restrict access to
 * actions the module performs.
 *
 * @link https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_permission/7
 * @return array
 */
function news_menu_permission() {
  $permissions = array(
    'admin qwerty news menu' => array(
      'title' => t('Administer the Qwerty news module'),
      'description' => t('Selects the vocabulary and parent main menu to display'),
    ),
  );

  return $permissions;
}

/**
 * Administration form
 *
 * @link https://api.drupal.org/api/drupal/developer!topics!forms_api_reference.html/7
 * @link https://api.drupal.org/api/drupal/modules%21system%21system.module/function/system_settings_form/7
 *
 * @param array $form
 *  Nested array of form elements that comprise the form
 * @param array $form_state
 *  A keyed array containing the current state of the form
 * @return array
 */
function _news_menu_admin_form($form, &$form_state) {
  $vocabularies = taxonomy_get_vocabularies();

  // Get previusly saved configs
  $defaultVid = variable_get('qwerty_news_admin_vocabulary');
  $defaultMlid = variable_get('qwerty_news_admin_main_menu', '');

  // Construct the list
  $vocabularyList = array();
  foreach ($vocabularies as $vid => $vocabulary) {
    $vocabularyList[$vid] = "{$vocabulary->name} ($vocabulary->machine_name)";
  }

  // Get main menu top level
  $query = db_select('menu_links', 'ml');
  $query->fields('ml', array('mlid', 'link_title'));
  $query->condition('menu_name', 'main-menu');
  $query->condition('plid', 0);

  $stm = $query->execute();
  $items = $stm->fetchAll(\PDO::FETCH_OBJ);

  $mainMenuItems = array('' => '-- SELECT ONE --');
  foreach ($items as $item) {

    $mainMenuItems[$item->mlid] = $item->link_title;
  }

  $introText = <<<INTROTEXTHTML
<p>This module allows you to select the taxonomy you want to display in the top menu as a submenu along with parent menu</p>
INTROTEXTHTML;

  $form['qwerty_news_admin_intro'] = array(
    '#markup' => $introText,
  );

  $form['qwerty_news_admin_vocabulary'] = array(
    '#type' => 'select',
    '#title' => t('Vocabulary to use'),
    '#description' => t('List of vocabularies. Select the vocabulary you want to use as menu'),
    '#options' => $vocabularyList,
    '#default_value' => $defaultVid,
    '#required' => TRUE,
  );

  $form['qwerty_news_admin_main_menu'] = array(
    '#type' => 'select',
    '#title' => t('Main menu link to use as parent'),
    '#description' => t('List of vocabularies. Select the vocabulary you want to use as menu'),
    '#options' => $mainMenuItems,
    '#default_value' => $defaultMlid,
    '#required' => TRUE,
  );

  $form['qwerty_news_admin_rebuild'] = array(
    '#type' => 'checkbox',
    '#title' => t('Rebuild menu'),
    '#description' => t('By checking this box, all the menus created by this module will be deleted and re-created'),
  );

  $form['#submit'][] = '_news_menu_admin_form_submit';
  return system_settings_form($form);
}

/**
 * Form submission handler for _news_menu_admin_form().
 *
 * @param array $form
 *  Nested array of form elements that comprise the form
 * @param array $form_state
 *  A keyed array containing the current state of the form
 * @return void
 */
function _news_menu_admin_form_submit($form, &$form_state) {
  if ($form_state['values']['qwerty_news_admin_rebuild'] == '1') {
    $vid = $form_state['values']['qwerty_news_admin_vocabulary'];
    $plid = $form_state['values']['qwerty_news_admin_main_menu'];
    $results = _news_menu_rebuild_main_menu($plid, $vid);

    $msg = t('QWERTY News sub-menu re-created. Total deleted: @deleted, total created: @created.',
      array(
        '@deleted' => $results['deleted'],
        '@created' => $results['created'],
      )
    );

    drupal_set_message($msg, 'status');
  }
}

/**
 * Deletes all submenus for the main menu that has the module 'news_menu' and
 * re-inserts them
 *
 * @link https://api.drupal.org/api/drupal/includes%21menu.inc/function/menu_link_save/7
 * @param int $plid
 *  Main menu parent link id
 * @param int $vid
 *  Vocabulary ID. Will get the terms for the given vocabulary and add them to
 *  $plid
 * @return array
 *  An array as follow:
 * @code
 * array(
 *  'deleted' => (int),
 *  'created' => (int),
 * );
 * @endcode
 */
function _news_menu_rebuild_main_menu($plid, $vid) {
  $totalDeleted = 0;
  $totalCreated = 0;
  if (ctype_digit((string) $plid) && ctype_digit((string) $vid)) {
    $totalDeleted = db_delete('menu_links')
      ->condition('module', 'news_menu')
      ->execute();
  }

  // Get all the terms for the vocabulary
  $terms = taxonomy_get_tree($vid);
  foreach ($terms as $tid => $term) {
    // Only first level
    if ($term->parents[0] != '0') {
      continue;
    }

    $termUri = taxonomy_term_uri($term);
    $termPath = drupal_get_normal_path($termUri['path']);

    // Construct the menu link
    $item = array(
      'link_path'  => $termPath,
      'link_title' => $term->name,
      'menu_name'  => 'main-menu',
      'module'     => 'news_menu',
      'weight'     => 0,
      'expanded'   => 1,
      'options'    => array(
        'attributes' => array(
          'title' => $term->name,
          'alt'   => $term->name,
        ),
      ),
      'plid'       => $plid,
    );

    $mlid = menu_link_save($item);
    if (ctype_digit((string) $mlid)) {
      $totalCreated++;
    }
  }

  return array(
    'deleted' => $totalDeleted,
    'created' => $totalCreated,
  );
}